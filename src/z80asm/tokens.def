#!perl -S filepp.pl
#option -mp $ 
#option -m bigfunc.pm -m defplus.pm -m foreach.pm -m maths.pm -m format.pm 
#option -m c-comment.pm -m eat-empty-lines.pm
/*
     ZZZZZZZZZZZZZZZZZZZZ    8888888888888       00000000000
   ZZZZZZZZZZZZZZZZZZZZ    88888888888888888    0000000000000
                ZZZZZ      888           888  0000         0000
              ZZZZZ        88888888888888888  0000         0000
            ZZZZZ            8888888888888    0000         0000       AAAAAA         SSSSSSSSSSS   MMMM       MMMM
          ZZZZZ            88888888888888888  0000         0000      AAAAAAAA      SSSS            MMMMMM   MMMMMM
        ZZZZZ              8888         8888  0000         0000     AAAA  AAAA     SSSSSSSSSSS     MMMMMMMMMMMMMMM
      ZZZZZ                8888         8888  0000         0000    AAAAAAAAAAAA      SSSSSSSSSSS   MMMM MMMMM MMMM
    ZZZZZZZZZZZZZZZZZZZZZ  88888888888888888    0000000000000     AAAA      AAAA           SSSSS   MMMM       MMMM
  ZZZZZZZZZZZZZZZZZZZZZ      8888888888888       00000000000     AAAA        AAAA  SSSSSSSSSSS     MMMM       MMMM

Copyright (C) Gunther Strube, InterLogic 1993-99
Copyright (C) Paulo Custodio, 2011-2015

Define lexer tokens

$Header: /cvsroot/z88dk/z88dk/src/z80asm/tokens.def,v 1.1 2015/04/02 20:00:19 pauloscustodio Exp $
*/

#foreachdelim /\s+/

/*-----------------------------------------------------------------------------
*	TOKENS: list of tuples (token-id => regular-expression)
*----------------------------------------------------------------------------*/

/* = 0; end of file reached */
#define TOKENS	END			"" 	

/* returned for rubish */
#defplus TOKENS	NIL			""

/* semantic tokens; TERN_COND : cond ? true : false */
#defplus TOKENS	\
		NAME		""	\
		LABEL		""	\
		NUMBER		""	\
		STRING		""	\
		TERN_COND	""
		
/* tokens */
#defplus TOKENS	\
		NEWLINE 	"\n" \
		LOG_NOT 	"!"	\
		CONST_EXPR	"#"	\
		MOD 		"%"	\
		BIN_AND 	"&"	\
		LOG_AND 	"&&" \
		LPAREN 		"("	\
		RPAREN 		")"	\
		MULTIPLY 	"*"	\
		PLUS 		"+"	\
		COMMA 		","	\
		MINUS 		"-"	\
		DOT 		"."	\
		DIVIDE 		"/"	\
		COLON 		":"	\
		LESS 		"<"	\
		LEFT_SHIFT	"<<" \
		LESS_EQ 	"<=" \
		NOT_EQ 		("<>"|"!=")) \
		EQUAL 		("="|"==")) \
		GREATER 	">"	\
		RIGHT_SHIFT	">>" \
		GREATER_EQ	">=" \
		QUESTION 	"?"	\
		LSQUARE 	"["	\
		RSQUARE 	"]"	\
		BIN_XOR 	"^"	\
		POWER 		"**" \
		LCURLY 		"{"	\
		BIN_OR 		"|"	\
		LOG_OR 		"||" \
		RCURLY 		"}"	\
		BIN_NOT 	"~"

/* indirect 8-bit register */
#defplus TOKENS \
		IND_C		indirect_C

/* indirect 16-bit registers */
#defplus TOKENS \
		IND_BC		indirect_BC	\
		IND_DE		indirect_DE	\
		IND_HL		indirect_HL	\
		IND_SP		indirect_SP

/* TK_IND_IX|IY is followed by ')', '+' or '-', but follow char is not matched - 
*  can collect expression, will be positive or negative depending on symbol */
#defplus TOKENS \
		IND_IX		indirect_IX	\
		IND_IY		indirect_IY

/*-----------------------------------------------------------------------------
*	KEYWORDS: list of token-id for keywords
*----------------------------------------------------------------------------*/

/* Assembly keywords */
#define KEYWORDS 	ASMPC

/* flags, C register */
#defplus KEYWORDS	NZ Z NC C PO PE P M

/* 8-bit registers */
#defplus KEYWORDS	B D E H L A F I R IIR EIR IXH IYH IXL IYL

/* 16-bit registers */
#defplus KEYWORDS	BC DE HL IX IY AF SP

#defplus TOKENS \
		AF1			"AF'"i

/* assembly directives */
#defplus KEYWORDS	BINARY \
					DEFB DEFC DEFGROUP DEFINE DEFL DEFM DEFS DEFVARS DEFW \
					ELSE ENDIF EXTERN GLOBAL IF IFDEF IFNDEF INCLUDE \
					LIB LINE LSTOFF LSTON MODULE ORG PUBLIC SECTION \
					UNDEFINE XDEF XLIB XREF 

/* DEFGROUP storage specifiers */
#defplus TOKENS \
		DS_B		"DS.B"i	\
		DS_W		"DS.W"i	\
		DS_P		"DS.P"i	\
		DS_L		"DS.L"i

/* Z80 opcode specifiers */
#defplus KEYWORDS	ADC ADD AND BIT CALL CCF CP CPD CPDR CPI CPIR CPL \
					DAA DEC DI DJNZ EI EX EXX HALT IM IN INC IND INDR INI INIR \
					JP JR LD LDD LDDR LDI LDIR NEG NOP OR OTDR OTIR OUT OUTD OUTI \
					POP PUSH RES RET RETI RETN \
					RL RLA RLC RLCA RLD RR RRA RRC RRCA RRD \
					RST SBC SCF SET SLA SLL SRA SRL SUB XOR 

/* Z88DK specific opcodes */
#defplus KEYWORDS	CALL_OZ OZ CALL_PKG FPP INVOKE 

/*-----------------------------------------------------------------------------
*	function to generate list of defines / enums
*----------------------------------------------------------------------------*/

#bigfunc OUTPUT_TOKEN( FORMAT, NAME, ID )
$printf( $FORMAT, $NAME, $ID )
#endbigfunc

#bigfunc OUTPUT_TOKENS( FORMAT )
#  defeval TOKEN_ID 0
#  foreach TOKEN,EXPR $TOKENS
$OUTPUT_TOKEN( $FORMAT, $TOKEN, $TOKEN_ID )
#    defeval TOKEN_ID $add($TOKEN_ID, 1)
#  endforeach
#  foreach TOKEN $KEYWORDS
$OUTPUT_TOKEN( $FORMAT, $TOKEN, $TOKEN_ID )
#    defeval TOKEN_ID $add($TOKEN_ID, 1)
#  endforeach
#endbigfunc
